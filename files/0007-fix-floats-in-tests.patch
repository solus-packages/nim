diff -Nru nim-0.17.2.orig/lib/pure/complex.nim nim-0.17.2/lib/pure/complex.nim
--- nim-0.17.2.orig/lib/pure/complex.nim	2017-09-07 21:45:44.000000000 +0300
+++ nim-0.17.2/lib/pure/complex.nim	2017-11-15 23:03:41.767066276 +0300
@@ -378,6 +378,9 @@
 
 
 when isMainModule:
+  template assertEqual(actual: float, expected: float, epsilon = 1.0e-8, msg = "") =
+    doAssert(actual == expected or abs(abs(actual) - abs(expected)) < epsilon, msg)
+
   var z = (0.0, 0.0)
   var oo = (1.0,1.0)
   var a = (1.0, 2.0)
@@ -399,7 +402,7 @@
   assert( tt/10.0 == a )
   assert( oo+(-1.0) == i )
   assert( (-1.0)+oo == i )
-  assert( abs(oo) == sqrt(2.0) )
+  assertEqual( abs(oo), sqrt(2.0) )
   assert( conjugate(a) == (1.0, -2.0) )
   assert( sqrt(m1) == i )
   assert( exp(ipi) =~ m1 )
@@ -437,7 +440,7 @@
   assert( arccsch(a) =~ arcsinh(1/a) )
   assert( arccoth(a) =~ arctanh(1/a) )
 
-  assert( phase(a) == 1.1071487177940904 )
+  assertEqual( phase(a), 1.1071487177940904 )
   var t = polar(a)
   assert( rect(t.r, t.phi) =~ a )
   assert( rect(1.0, 2.0) =~ (-0.4161468365471424, 0.9092974268256817) )
diff -Nru nim-0.17.2.orig/lib/pure/stats.nim nim-0.17.2/lib/pure/stats.nim
--- nim-0.17.2.orig/lib/pure/stats.nim	2017-09-07 21:45:44.000000000 +0300
+++ nim-0.17.2/lib/pure/stats.nim	2017-11-15 22:59:02.094909978 +0300
@@ -304,47 +304,50 @@
 {.pop.}
 
 when isMainModule:
+  template assertEqual(actual: float, expected: float, epsilon = 1.0e-8, msg = "") =
+    doAssert(actual == expected or abs(abs(actual) - abs(expected)) < epsilon, msg)
+
   proc clean(x: float): float =
     result = round(1.0e8*x).float * 1.0e-8
 
   var rs: RunningStat
   rs.push(@[1.0, 2.0, 1.0, 4.0, 1.0, 4.0, 1.0, 2.0])
   doAssert(rs.n == 8)
-  doAssert(clean(rs.mean) == 2.0)
-  doAssert(clean(rs.variance()) == 1.5)
-  doAssert(clean(rs.varianceS()) == 1.71428571)
-  doAssert(clean(rs.skewness()) == 0.81649658)
-  doAssert(clean(rs.skewnessS()) == 1.01835015)
-  doAssert(clean(rs.kurtosis()) == -1.0)
-  doAssert(clean(rs.kurtosisS()) == -0.7000000000000001)
+  assertEqual(clean(rs.mean), 2.0)
+  assertEqual(clean(rs.variance()), 1.5)
+  assertEqual(clean(rs.varianceS()), 1.71428571)
+  assertEqual(clean(rs.skewness()), 0.81649658)
+  assertEqual(clean(rs.skewnessS()), 1.01835015)
+  assertEqual(clean(rs.kurtosis()), -1.0)
+  assertEqual(clean(rs.kurtosisS()), -0.7000000000000001)
 
   var rs1, rs2: RunningStat
   rs1.push(@[1.0, 2.0, 1.0, 4.0])
   rs2.push(@[1.0, 4.0, 1.0, 2.0])
   let rs3 = rs1 + rs2
-  doAssert(clean(rs3.mom2) == clean(rs.mom2))
-  doAssert(clean(rs3.mom3) == clean(rs.mom3))
-  doAssert(clean(rs3.mom4) == clean(rs.mom4))
+  assertEqual(clean(rs3.mom2), clean(rs.mom2))
+  assertEqual(clean(rs3.mom3), clean(rs.mom3))
+  assertEqual(clean(rs3.mom4), clean(rs.mom4))
   rs1 += rs2
-  doAssert(clean(rs1.mom2) == clean(rs.mom2))
-  doAssert(clean(rs1.mom3) == clean(rs.mom3))
-  doAssert(clean(rs1.mom4) == clean(rs.mom4))
+  assertEqual(clean(rs1.mom2), clean(rs.mom2))
+  assertEqual(clean(rs1.mom3), clean(rs.mom3))
+  assertEqual(clean(rs1.mom4), clean(rs.mom4))
   rs1.clear()
   rs1.push(@[1.0, 2.2, 1.4, 4.9])
-  doAssert(rs1.sum == 9.5)
-  doAssert(rs1.mean() == 2.375)
+  assertEqual(rs1.sum, 9.5)
+  assertEqual(rs1.mean(), 2.375)
 
   when not defined(cpu32):
     # XXX For some reason on 32bit CPUs these results differ
     var rr: RunningRegress
     rr.push(@[0.0,1.0,2.8,3.0,4.0], @[0.0,1.0,2.3,3.0,4.0])
-    doAssert(rr.slope() == 0.9695585996955861)
-    doAssert(rr.intercept() == -0.03424657534246611)
-    doAssert(rr.correlation() == 0.9905100362239381)
+    assertEqual(rr.slope(), 0.9695585996955861)
+    assertEqual(rr.intercept(), -0.03424657534246611)
+    assertEqual(rr.correlation(), 0.9905100362239381)
     var rr1, rr2: RunningRegress
     rr1.push(@[0.0,1.0], @[0.0,1.0])
     rr2.push(@[2.8,3.0,4.0], @[2.3,3.0,4.0])
     let rr3 = rr1 + rr2
-    doAssert(rr3.correlation() == rr.correlation())
-    doAssert(clean(rr3.slope()) == clean(rr.slope()))
-    doAssert(clean(rr3.intercept()) == clean(rr.intercept()))
+    assertEqual(rr3.correlation(), rr.correlation())
+    assertEqual(clean(rr3.slope()), clean(rr.slope()))
+    assertEqual(clean(rr3.intercept()), clean(rr.intercept()))
diff -Nru nim-0.17.2.orig/lib/pure/times.nim nim-0.17.2/lib/pure/times.nim
--- nim-0.17.2.orig/lib/pure/times.nim	2017-09-07 21:45:44.000000000 +0300
+++ nim-0.17.2/lib/pure/times.nim	2017-11-15 22:58:50.670901055 +0300
@@ -1387,18 +1387,21 @@
 
 
 when isMainModule:
+  template assertEqual(actual: float, expected: float, epsilon = 1.0e-8, msg = "") =
+    doAssert(actual == expected or abs(abs(actual) - abs(expected)) < epsilon, msg)
+
   # this is testing non-exported function
   var
     t4 = getGMTime(fromSeconds(876124714)) # Mon  6 Oct 08:58:34 BST 1997
     t4L = getLocalTime(fromSeconds(876124714))
-  assert toSeconds(t4, initInterval(seconds=0)) == 0.0
-  assert toSeconds(t4L, initInterval(milliseconds=1)) == toSeconds(t4, initInterval(milliseconds=1))
-  assert toSeconds(t4L, initInterval(seconds=1)) == toSeconds(t4, initInterval(seconds=1))
-  assert toSeconds(t4L, initInterval(minutes=1)) == toSeconds(t4, initInterval(minutes=1))
-  assert toSeconds(t4L, initInterval(hours=1)) == toSeconds(t4, initInterval(hours=1))
-  assert toSeconds(t4L, initInterval(days=1)) == toSeconds(t4, initInterval(days=1))
-  assert toSeconds(t4L, initInterval(months=1)) == toSeconds(t4, initInterval(months=1))
-  assert toSeconds(t4L, initInterval(years=1)) == toSeconds(t4, initInterval(years=1))
+  assertEqual toSeconds(t4, initInterval(seconds=0)), 0.0
+  assertEqual toSeconds(t4L, initInterval(milliseconds=1)), toSeconds(t4, initInterval(milliseconds=1))
+  assertEqual toSeconds(t4L, initInterval(seconds=1)), toSeconds(t4, initInterval(seconds=1))
+  assertEqual toSeconds(t4L, initInterval(minutes=1)), toSeconds(t4, initInterval(minutes=1))
+  assertEqual toSeconds(t4L, initInterval(hours=1)), toSeconds(t4, initInterval(hours=1))
+  assertEqual toSeconds(t4L, initInterval(days=1)), toSeconds(t4, initInterval(days=1))
+  assertEqual toSeconds(t4L, initInterval(months=1)), toSeconds(t4, initInterval(months=1))
+  assertEqual toSeconds(t4L, initInterval(years=1)), toSeconds(t4, initInterval(years=1))
 
   # Further tests are in tests/stdlib/ttime.nim
   # koch test c stdlib
